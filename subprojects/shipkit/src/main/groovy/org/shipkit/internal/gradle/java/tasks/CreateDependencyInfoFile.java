package org.shipkit.internal.gradle.java.tasks;

import org.gradle.api.artifacts.*;
import org.shipkit.internal.notes.util.IOUtil;

public class CreateDependencyInfoFile {

    private static final String DESCRIPTION = "This file was generated by Shipkit Gradle plugin. See http://shipkit.org.";
    public static final String SEPARATOR = " : ";
    public static final String NEWLINE = "\r\n";

    public void createDependencyInfoFile(CreateDependencyInfoFileTask task) {
        StringBuilder result = new StringBuilder("#description" + NEWLINE
            + DESCRIPTION + NEWLINE + NEWLINE
            + "#dependencies" + NEWLINE
            + "#group : name : version @@@ extension : classifier : artifactName : type");

        for (Dependency dependency: task.getConfiguration().getAllDependencies()) {
            if (dependency instanceof ModuleDependency) {
                String dep = getResolvedDependency(task, (ModuleDependency) dependency);
                result.append(NEWLINE + dep);
            }
        }

        IOUtil.writeFile(task.getOutputFile(), result.toString());
    }

    private String getResolvedDependency(CreateDependencyInfoFileTask task, ModuleDependency dependency) {
        if (!dependency.getArtifacts().isEmpty()) {
            String result = "";
            for (DependencyArtifact artifact : dependency.getArtifacts()) {
                result += getDependencyForSingleArtifact(task, dependency, artifact);
            }
            return result;
        } else {
            return getDependencyForSingleArtifact(task, dependency, null);
        }
    }

    private boolean isSubmodule(CreateDependencyInfoFileTask task, ModuleDependency dependency) {
        return task.getProjectGroup().equals(dependency.getGroup())
            && task.getProjectVersion().equals(dependency.getVersion());
    }

    private String getDependencyForSingleArtifact(CreateDependencyInfoFileTask task, ModuleDependency dependency, DependencyArtifact artifact) {
        String result =  dependency.getGroup() + SEPARATOR + dependency.getName();
        if (!isSubmodule(task, dependency)) {
            result += SEPARATOR + dependency.getVersion();
        }
        return result + getArtifact(artifact);
    }

    private String getArtifact(DependencyArtifact artifact) {
        if (artifact == null) {
            return "";
        }

        return " @@@ " + artifact.getExtension() + SEPARATOR +
            artifact.getClassifier() + SEPARATOR +
            artifact.getName() + SEPARATOR +
            artifact.getType();
    }

}
