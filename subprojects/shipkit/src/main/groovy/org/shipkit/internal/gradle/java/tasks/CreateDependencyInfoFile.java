package org.shipkit.internal.gradle.java.tasks;

import org.gradle.api.artifacts.Dependency;
import org.gradle.api.artifacts.ModuleVersionIdentifier;
import org.gradle.api.artifacts.ResolvedArtifact;
import org.gradle.api.artifacts.SelfResolvingDependency;
import org.json.simple.JsonArray;
import org.json.simple.JsonObject;
import org.json.simple.Jsoner;
import org.shipkit.internal.notes.util.IOUtil;

import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Set;

public class CreateDependencyInfoFile {

    private static final String DESCRIPTION = "This file was generated by Shipkit Gradle plugin. See http://shipkit.org\n\n";

    public void createDependencyInfoFile(CreateDependencyInfoFileTask task) {
        JsonObject result = createJsonObject();
        result.put("description", DESCRIPTION);

        JsonArray dependencies = createJsonArray();

        for (ResolvedArtifact artifact : task.getConfiguration().getResolvedConfiguration().getResolvedArtifacts()) {
            addResolvedDependency(task, dependencies, artifact);
        }

        result.put("dependencies", dependencies);

        IOUtil.writeFile(task.getOutputFile(), Jsoner.prettyPrint(result.toJson()));
    }

    private void addResolvedDependency(CreateDependencyInfoFileTask task, JsonArray dependencies, ResolvedArtifact artifact) {
        JsonObject dependency = createJsonObject();

        ModuleVersionIdentifier moduleVersionId = moduleVersionId(artifact);

        if (moduleVersionId != null && task.getProjectGroup().equals(moduleVersionId.getGroup())
            && task.getCurrentProjectVersion().equals(moduleVersionId.getVersion())) {
            return; // skip sibling projects from the same group and of the same version
        }

        dependency.put("artifactName", artifact.getName());
        dependency.put("artifactClassifier", artifact.getClassifier());
        dependency.put("artifactExtension", artifact.getExtension());
        dependency.put("artifactType", artifact.getType());
        dependency.put("dependencyGroup", moduleVersionId == null ? null : moduleVersionId.getGroup());
        dependency.put("dependencyName", moduleVersionId == null ? null : moduleVersionId.getName());
        dependency.put("dependencyVersion", moduleVersionId == null ? null : moduleVersionId.getVersion());

        dependencies.add(dependency);
    }

    private ModuleVersionIdentifier moduleVersionId(ResolvedArtifact artifact) {
        return artifact.getModuleVersion() == null ? null : artifact.getModuleVersion().getId();
    }

    private JsonObject createJsonObject() {
        return new JsonObject(new LinkedHashMap<String, Object>()); // linkedHashMap to keep the order
    }

    private JsonArray createJsonArray() {
        return new JsonArray(new ArrayList<Object>()); //arrayList to keep the order
    }


}
