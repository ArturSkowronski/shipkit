package org.shipkit.internal.gradle.java.tasks

import org.gradle.api.artifacts.Configuration
import org.gradle.api.artifacts.ModuleVersionIdentifier
import org.gradle.api.artifacts.ResolvedArtifact
import org.gradle.api.artifacts.ResolvedConfiguration
import org.gradle.api.artifacts.ResolvedModuleVersion
import testutil.PluginSpecification

class CreateDependencyInfoFileTest extends PluginSpecification {

    CreateDependencyInfoFile createDependencyInfoFile = new CreateDependencyInfoFile()

    def "should create correct output file"() {
        given:
        def configuration = Mock(Configuration)
        def resolvedConfiguration = Mock(ResolvedConfiguration)
        configuration.getResolvedConfiguration() >> resolvedConfiguration
        resolvedConfiguration.getResolvedArtifacts() >> resolvedArtifacts()
        def createDependencyInfoFileTask = project.tasks.create("createTask", CreateDependencyInfoFileTask)

        def output = tmp.newFile("output")
        createDependencyInfoFileTask.outputFile = output
        createDependencyInfoFileTask.configuration = configuration
        createDependencyInfoFileTask.projectGroup = "siblingGroup"
        createDependencyInfoFileTask.currentProjectVersion = "siblingVersion"

        when:
        createDependencyInfoFile.createDependencyInfoFile(createDependencyInfoFileTask)

        then:
        output.text == """{
\t"description":"This file was generated by Shipkit Gradle plugin. See http:\\/\\/shipkit.org\\n\\n",
\t"dependencies":[
\t\t{
\t\t\t"artifactType":"artType",
\t\t\t"dependencyGroup":"depGroup",
\t\t\t"dependencyName":"depName",
\t\t\t"artifactName":"artName",
\t\t\t"artifactClassifier":"artClassifier",
\t\t\t"artifactExtension":"artExtension",
\t\t\t"dependencyVersion":"depVersion"
\t\t},
\t\t{
\t\t\t"artifactType":"type",
\t\t\t"dependencyGroup":null,
\t\t\t"dependencyName":null,
\t\t\t"artifactName":"name",
\t\t\t"artifactClassifier":"classifier",
\t\t\t"artifactExtension":"extension",
\t\t\t"dependencyVersion":null
\t\t}
\t]
}"""
    }

    private Set<ResolvedArtifact> resolvedArtifacts() {
        def artifacts = new LinkedHashSet<ResolvedArtifact>()

        def artifact = Mock(ResolvedArtifact)
        artifact.classifier >> "artClassifier"
        artifact.name >> "artName"
        artifact.type >> "artType"
        artifact.extension >> "artExtension"

        artifact.moduleVersion >> moduleVersion("depGroup", "depName", "depVersion")

        def emptyModuleArtifact = Mock(ResolvedArtifact)
        emptyModuleArtifact.classifier >> "classifier"
        emptyModuleArtifact.name >> "name"
        emptyModuleArtifact.type >> "type"
        emptyModuleArtifact.extension >> "extension"

        def sibling = Mock(ResolvedArtifact)
        sibling.moduleVersion >> moduleVersion("siblingGroup", "siblingName", "siblingVersion")

        artifacts.add(artifact)
        artifacts.add(emptyModuleArtifact)
        artifacts.add(sibling)

        return artifacts
    }

    private ResolvedModuleVersion moduleVersion(group, name, version) {
        def moduleVersion = Mock(ResolvedModuleVersion)
        def moduleVersionId = Mock(ModuleVersionIdentifier)
        moduleVersion.id >> moduleVersionId

        moduleVersionId.group >> group
        moduleVersionId.name >> name
        moduleVersionId.version >> version

        return moduleVersion
    }
}
